-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Dphones.Enum.Mixen_constraint exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| unique or primary key constraints on table "mixen"

  - Mixen\_list\_index\_key - unique or primary key constraint on columns "index", "list"
  - Mixen\_pkey - unique or primary key constraint on columns "url"
  - Mixen\_title\_key - unique or primary key constraint on columns "title"
  - Mixen\_url\_key - unique or primary key constraint on columns "url"

-}
type Mixen_constraint
    = Mixen_list_index_key
    | Mixen_pkey
    | Mixen_title_key
    | Mixen_url_key


list : List Mixen_constraint
list =
    [ Mixen_list_index_key, Mixen_pkey, Mixen_title_key, Mixen_url_key ]


decoder : Decoder Mixen_constraint
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "mixen_list_index_key" ->
                        Decode.succeed Mixen_list_index_key

                    "mixen_pkey" ->
                        Decode.succeed Mixen_pkey

                    "mixen_title_key" ->
                        Decode.succeed Mixen_title_key

                    "mixen_url_key" ->
                        Decode.succeed Mixen_url_key

                    _ ->
                        Decode.fail ("Invalid Mixen_constraint type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Mixen_constraint -> String
toString enum____ =
    case enum____ of
        Mixen_list_index_key ->
            "mixen_list_index_key"

        Mixen_pkey ->
            "mixen_pkey"

        Mixen_title_key ->
            "mixen_title_key"

        Mixen_url_key ->
            "mixen_url_key"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Mixen_constraint
fromString enumString____ =
    case enumString____ of
        "mixen_list_index_key" ->
            Just Mixen_list_index_key

        "mixen_pkey" ->
            Just Mixen_pkey

        "mixen_title_key" ->
            Just Mixen_title_key

        "mixen_url_key" ->
            Just Mixen_url_key

        _ ->
            Nothing
