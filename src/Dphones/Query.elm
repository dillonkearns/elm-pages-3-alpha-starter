-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Dphones.Query exposing (..)

import Dphones.Enum.Mixen_select_column
import Dphones.Enum.Set_select_column
import Dphones.InputObject
import Dphones.Interface
import Dphones.Object
import Dphones.Scalar
import Dphones.ScalarCodecs
import Dphones.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias MixenOptionalArguments =
    { distinct_on : OptionalArgument (List Dphones.Enum.Mixen_select_column.Mixen_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Dphones.InputObject.Mixen_order_by)
    , where_ : OptionalArgument Dphones.InputObject.Mixen_bool_exp
    }


{-| fetch data from the table: "mixen"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
mixen :
    (MixenOptionalArguments -> MixenOptionalArguments)
    -> SelectionSet decodesTo Dphones.Object.Mixen
    -> SelectionSet (List decodesTo) RootQuery
mixen fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum Dphones.Enum.Mixen_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (Dphones.InputObject.encodeMixen_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ Dphones.InputObject.encodeMixen_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "mixen" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias MixenAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Dphones.Enum.Mixen_select_column.Mixen_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Dphones.InputObject.Mixen_order_by)
    , where_ : OptionalArgument Dphones.InputObject.Mixen_bool_exp
    }


{-| fetch aggregated fields from the table: "mixen"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
mixen_aggregate :
    (MixenAggregateOptionalArguments -> MixenAggregateOptionalArguments)
    -> SelectionSet decodesTo Dphones.Object.Mixen_aggregate
    -> SelectionSet decodesTo RootQuery
mixen_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum Dphones.Enum.Mixen_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (Dphones.InputObject.encodeMixen_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ Dphones.InputObject.encodeMixen_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "mixen_aggregate" optionalArgs____ object____ Basics.identity


type alias MixenByPkRequiredArguments =
    { url : String }


{-| fetch data from the table: "mixen" using primary key columns
-}
mixen_by_pk :
    MixenByPkRequiredArguments
    -> SelectionSet decodesTo Dphones.Object.Mixen
    -> SelectionSet (Maybe decodesTo) RootQuery
mixen_by_pk requiredArgs____ object____ =
    Object.selectionForCompositeField "mixen_by_pk" [ Argument.required "url" requiredArgs____.url Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias SetOptionalArguments =
    { distinct_on : OptionalArgument (List Dphones.Enum.Set_select_column.Set_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Dphones.InputObject.Set_order_by)
    , where_ : OptionalArgument Dphones.InputObject.Set_bool_exp
    }


{-| fetch data from the table: "set"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
set :
    (SetOptionalArguments -> SetOptionalArguments)
    -> SelectionSet decodesTo Dphones.Object.Set
    -> SelectionSet (List decodesTo) RootQuery
set fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum Dphones.Enum.Set_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (Dphones.InputObject.encodeSet_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ Dphones.InputObject.encodeSet_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "set" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias SetAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Dphones.Enum.Set_select_column.Set_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Dphones.InputObject.Set_order_by)
    , where_ : OptionalArgument Dphones.InputObject.Set_bool_exp
    }


{-| fetch aggregated fields from the table: "set"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
set_aggregate :
    (SetAggregateOptionalArguments -> SetAggregateOptionalArguments)
    -> SelectionSet decodesTo Dphones.Object.Set_aggregate
    -> SelectionSet decodesTo RootQuery
set_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum Dphones.Enum.Set_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (Dphones.InputObject.encodeSet_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ Dphones.InputObject.encodeSet_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "set_aggregate" optionalArgs____ object____ Basics.identity


type alias SetByPkRequiredArguments =
    { tag : String }


{-| fetch data from the table: "set" using primary key columns
-}
set_by_pk :
    SetByPkRequiredArguments
    -> SelectionSet decodesTo Dphones.Object.Set
    -> SelectionSet (Maybe decodesTo) RootQuery
set_by_pk requiredArgs____ object____ =
    Object.selectionForCompositeField "set_by_pk" [ Argument.required "tag" requiredArgs____.tag Encode.string ] object____ (Basics.identity >> Decode.nullable)
